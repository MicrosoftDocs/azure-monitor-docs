### YamlMime:FAQ
metadata:
  title: Application Insights FAQ – Frequently Asked Questions
  description: "Official FAQ for Azure Monitor Application Insights. Find answers to questions about using Application Insights with Azure Monitor."
  author: 
  ms.author: 
  ms.service: azure-monitor
  ms.topic: faq 
  ms.date: 05/23/2025

title: "Application Insights FAQ – Frequently Asked Questions"
summary: |
   Official FAQ for Azure Monitor Application Insights. Find answers to questions about using Application Insights with Azure Monitor.


sections:
  - name: Overview
    questions:
      - question: How do I instrument an application?
        answer: |
          For detailed information about instrumenting applications to enable Application Insights, see [data collection basics](opentelemetry-overview.md).

      - question: How do I use Application Insights?
        answer: |
          After enabling Application Insights by [instrumenting an application](opentelemetry-overview.md), we suggest first checking out [Live metrics](live-stream.md) and the [Application map](app-map.md).

      - question: What telemetry does Application Insights collect?
        answer: |
          From server web apps:

          * HTTP requests.
          * [Dependencies](./asp-net-dependencies.md). Calls to SQL databases, HTTP calls to external services, Azure Cosmos DB, Azure Table Storage, Azure Blob Storage, and Azure Queue Storage.
          * [Exceptions](./asp-net-exceptions.md) and stack traces.
          * [Performance counters](./asp-net-counters.md): Performance counters are available when using:
             * [Azure Monitor Application Insights agent](application-insights-asp-net-agent.md)
             * [Azure monitoring for VMs or virtual machine scale sets](./azure-vm-vmss-apps.md)
             * [Application Insights `collectd` writer](/previous-versions/azure/azure-monitor/app/deprecated-java-2x#collectd-linux-performance-metrics-in-application-insights-deprecated).
          * [Custom events and metrics](./api-custom-events-metrics.md) that you code.
          * [Trace logs](./asp-net-trace-logs.md) if you configure the appropriate collector.
          
          From [client webpages](./javascript-sdk.md):
          
          * Uncaught exceptions in your app, including information on
             * Stack trace
             * Exception details and message accompanying the error
             * Line & column number of error
             * URL where error was raised
             * Network Dependency Requests made by your app XML Http Request (XHR) and Fetch (fetch collection is disabled by default) requests, include information on:
                * Url of dependency source
                * Command & Method used to request the dependency
                * Duration of the request
                * Result code and success status of the request
                * ID (if any) of user making the request
                * Correlation context (if any) where request is made
          * User information (for example, Location, network, IP)
          * Device information (for example, Browser, OS, version, language, model)
          * Session information

             > [!NOTE]
             > For some applications, such as single-page applications (SPAs), the duration isn't always recorded and, in those cases, defaults to 0.

             For more information, see [Data collection, retention, and storage in Application Insights](/previous-versions/azure/azure-monitor/app/data-retention-privacy).
          
           From other sources, if you configure them:
          
           * [Azure diagnostics](../agents/diagnostics-extension-to-application-insights.md)
           * [Import to Log Analytics](../logs/data-collector-api.md)
           * [Log Analytics](../logs/data-collector-api.md)
           * [Logstash](../logs/data-collector-api.md)
    
      - question: How many Application Insights resources should I deploy?
        answer: |
          To understand the number of Application Insights resources required to cover your application or components across environments, see the [Application Insights deployment planning guide](create-workspace-resource.md#how-many-application-insights-resources-should-i-deploy).  

      - question: How can I manage Application Insights resources with PowerShell?
        answer: |
          You can [write PowerShell scripts](./powershell.md) by using Azure Resource Monitor to:
          
          * Create and update Application Insights resources.
          * Set the pricing plan.
          * Get the instrumentation key.
          * Add a metric alert.
          * Add an availability test.
          
          You can't set up a metrics explorer report or set up continuous export.    

      - question: How can I query Application Insights telemetry? 
        answer: |
           Use the [REST API](/rest/api/application-insights/) to run [Log Analytics](../logs/log-query-overview.md) queries.

      - question: Can I send telemetry to the Application Insights portal?
        answer: |
          We recommend the [Azure Monitor OpenTelemetry Distro](opentelemetry-enable.md).

          The [ingestion schema](https://github.com/microsoft/ApplicationInsights-dotnet/tree/master/BASE/Schema/PublicSchema) and [endpoint protocol](https://github.com/MohanGsk/ApplicationInsights-Home/blob/master/EndpointSpecs/ENDPOINT-PROTOCOL.md) are available publicly.    

      - question: How long does it take for telemetry to be collected?
        answer: |
           Most Application Insights data has a latency of under 5 minutes. Some data can take longer, which is typical for larger log files. See the [Application Insights service-level agreement](https://azure.microsoft.com/support/legal/sla/application-insights/v1_2/).    

      - question: How does Application Insights handle data collection, retention, storage, and privacy?
        answer: |
          #### Collection

          Application Insights collects telemetry about your app, including web server telemetry, web page telemetry, and performance counters. This data can be used to monitor your app's performance, health, and usage. You can select the location when you [create a new Application Insights resource](./create-workspace-resource.md).

          #### Retention and Storage

          Data is sent to an Application Insights [Log Analytics workspace](../logs/log-analytics-workspace-overview.md). You can choose the retention period for raw data, from 30 to 730 days. Aggregated data is retained for 90 days, and debug snapshots are retained for 15 days.

          #### Privacy

          Application Insights doesn't handle sensitive data by default. We recommend you don't put sensitive data in URLs as plain text and ensure your custom code doesn't collect personal or other sensitive details. During development and testing, check the sent data in your IDE and browser's debugging output windows.

          For archived information, see [Data collection, retention, and storage in Application Insights](/previous-versions/azure/azure-monitor/app/data-retention-privacy).

      - question: What is the Application Insights pricing model?
        answer: |
          Application Insights is billed through the Log Analytics workspace into which its log data ingested. The default Pay-as-you-go Log Analytics pricing tier includes 5 GB per month of free data allowance per billing account. Learn more about [Azure Monitor logs pricing options](https://azure.microsoft.com/pricing/details/monitor/).

      - question: Are there data transfer charges between an Azure web app and Application Insights?
        answer: |
          * If your Azure web app is hosted in a datacenter where there's an Application Insights collection endpoint, there's no charge.
          * If there's no collection endpoint in your host datacenter, your app's telemetry incurs [Azure outgoing charges](https://azure.microsoft.com/pricing/details/bandwidth/).
          
          This answer depends on the distribution of our endpoints, *not* on where your Application Insights resource is hosted.   

      - question: Do I incur network costs if my Application Insights resource is monitoring an Azure resource (that is, telemetry producer) in a different region?
        answer: |
          Yes, you can incur more network costs, which vary depending on the region the telemetry is coming from and where it's going. Refer to [Azure bandwidth pricing](https://azure.microsoft.com/pricing/details/bandwidth/) for details.

          If you're seeing unexpected charges or high costs in Application Insights, this guide can help. It covers common causes like high telemetry volume, data ingestion spikes, and misconfigured sampling. It's especially useful if you're troubleshooting issues related to cost spikes, telemetry volume, sampling not working, data caps, high ingestion, or unexpected billing. To get started, see [Troubleshoot high data ingestion in Application Insights](/troubleshoot/azure/azure-monitor/app-insights/telemetry/troubleshoot-high-data-ingestion).

      - question: What TLS versions are supported?
        answer: |
          Application Insights uses Transport Layer Security (TLS) 1.2 and 1.3.

          > [!IMPORTANT]
          >  On 1 March 2025, Azure will retire legacy versions of TLS across all services. At that time, Application Insights no longer supports TLS 1.0, TLS 1.1, and the listed legacy TLS 1.2/1.3 cipher suites and elliptic curves.

          For any general questions around the legacy TLS problem, see [Solving TLS problems](/security/engineering/solving-tls1-problem) and [Azure Resource Manager TLS Support](/azure/azure-resource-manager/management/tls-support).

  - name: Application Insights API for custom events and metrics
    questions:
      - question: Why am I missing telemetry data?
        answer: |
          Both [TelemetryChannels](telemetry-channels.md#what-are-telemetry-channels) will lose buffered telemetry if it isn't flushed before an application shuts down.

          To avoid data loss, flush the TelemetryClient when an application is shutting down.

          For more information, see [Flushing data](api-custom-events-metrics.md#flushing-data).
          
      - question: What exceptions might Track_() calls throw?
        answer: |
          None. You don't need to wrap them in try-catch clauses. If the SDK encounters problems, it will log messages in the debug console output and, if the messages get through, in Diagnostic Search.

      - question: Is there a REST API to get data from the portal?
        answer: |
          Yes, the [data access API](/rest/api/application-insights/). Other ways to extract data include [Power BI](..\logs\log-powerbi.md) on [workspace-based resource](create-workspace-resource.md).

      - question: Why are my calls to custom events and metrics APIs ignored?
        answer: |
          The Application Insights SDK isn't compatible with autoinstrumentation. If autoinstrumentation is enabled, calls to <code class="notranslate">Track()</code> and other custom events and metrics APIs will be ignored.

          Turn off autoinstrumentation in the Azure portal on the Application Insights tab of the App Service page or set <code class="notranslate">ApplicationInsightsAgent_EXTENSION_VERSION</code> to <code class="notranslate">disabled</code>.
          
      - question: Why are the counts in Search and Metrics charts unequal?
        answer: |
           [Sampling](./sampling.md) reduces the number of telemetry items (like requests and custom events) that are sent from your app to the portal. In Search, you see the number of items received. In metric charts that display a count of events, you see the number of original events that occurred.
          
           Each item that's transmitted carries an `itemCount` property that shows how many original events that item represents. To observe sampling in operation, you can run this query in Log Analytics:
          
           ```
           requests | summarize original_events = sum(itemCount), transmitted_events = count()
           ```
        
      - question: How can I set an alert on an event?
        answer: |
             Azure alerts are only on metrics. Create a custom metric that crosses a value threshold whenever your event occurs. Then set an alert on the metric. You get a notification whenever the metric crosses the threshold in either direction. You won't get a notification until the first crossing, no matter whether the initial value is high or low. There's always a latency of a few minutes.
     
  - name: Deploying Application Insights Agent for on-premises servers
    questions:
      - question: Does Application Insights Agent support proxy installations?
        answer: |
          Yes. There are multiple ways to download Application Insights Agent:

          * If your computer has internet access, you can onboard to the PowerShell Gallery by using `-Proxy` parameters.
          * You can also manually download the module and either install it on your computer or use it directly.

          Each of these options is described in the [detailed instructions](application-insights-asp-net-agent.md?tabs=detailed-instructions#instructions).  

      - question: Does Application Insights Agent support ASP.NET Core applications?
        answer: |
          Yes. In [Application Insights Agent 2.0.0](https://www.powershellgallery.com/packages/Az.ApplicationMonitor/2.0.0) and later, ASP.NET Core applications hosted in IIS are supported.

      - question: How do I verify that the enablement succeeded?
        answer: |
          * You can use the [Get-ApplicationInsightsMonitoringStatus](application-insights-asp-net-agent.md?tabs=api-reference#get-applicationinsightsmonitoringstatus) cmdlet to verify that enablement succeeded.
          * Use [Live Metrics](./live-stream.md) to quickly determine if your app is sending telemetry.
          * You can also use [Log Analytics](../logs/log-analytics-tutorial.md) to list all the cloud roles currently sending telemetry:

              ```Kusto
              union * | summarize count() by cloud_RoleName, cloud_RoleInstance
              ```
      - question: How do I achieve proxy passthrough?
        answer: |  
          To achieve proxy passthrough, configure a machine-level proxy or an application-level proxy.
          See [DefaultProxy](/dotnet/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings).

          Example Web.config:

          ```xml
          <system.net>
              <defaultProxy>
              <proxy proxyaddress="http://xx.xx.xx.xx:yyyy" bypassonlocal="true"/>
              </defaultProxy>
          </system.net>
          ```
  - name: TLS support 
    questions: 
      - question: Determine if TLS retirement affects you
        answer: |
          Application Insights and Azure Monitor don't control the TLS version used for HTTPS connections. The TLS version depends on the operating system and runtime environment where your application runs.

          To confirm the TLS version in use:

          - Review the documentation for your operating system and runtime or framework.
          - Contact the appropriate support team if you need further help. Don't open a support request with Application Insights.

          **Example language and runtime support for TLS 1.2+**

          The following versions include integrated support for TLS 1.2 or higher:

          - **.NET / .NET Core**: .NET Framework 4.6.2 or later, and all versions of .NET Core
          - **Java**: Java 8 update 161 (8u161) or later
          - **Python**: Python distributions built with OpenSSL 1.0.1 or later
          - **Node.js**: Node.js version 10 or later

          **Example operating system support for TLS 1.2+**

          The following operating systems include integrated support for TLS 1.2 or higher:

          - **Windows**: Windows 8, Windows Server 2012, and later
          - **Linux**: Most modern Linux distributions that use OpenSSL 1.0.1 or later     

      - question: How do I ensure my resources aren't affected?
        answer: |
           To avoid service disruptions, each remote endpoint (including dependent requests) your resource interacts with needs to support at least one combination of the same Protocol Version, Cipher Suite, and Elliptical Curve mentioned earlier. If the remote endpoint doesn't support the needed TLS configuration, it needs to be updated with support for some combination of the above-mentioned post-deprecation TLS configuration.

      - question: After May 1, 2025, what is the behavior for affected resources?
        answer: |
          Affected Application Insights resources stop ingesting data and can't access required application components. As a result, some features stop working.

      - question: Which components does the deprecation affect?
        answer: |
          The Transport Layer Security (TLS) deprecation detailed in this document should only affect the behavior after May 1, 2025. For more information about CRUD operations, see [Azure Resource Manager TLS Support](/azure/azure-resource-manager/management/tls-support). This resource provides more details on TLS support and deprecation timelines.

      - question: Where can I get Transport Layer Security (TLS) support?
        answer: |
           For any general questions around the legacy TLS problem, see [Solving TLS problems](/security/engineering/solving-tls1-problem). 

  - name: ASP.NET Core applications
    questions:
      - question: Does Application Insights support ASP.NET Core 3.1?
        answer: |
          ASP.NET Core 3.1 is no longer supported by Microsoft.

          [Application Insights SDK for ASP.NET Core](https://nuget.org/packages/Microsoft.ApplicationInsights.AspNetCore) version 2.8.0 and Visual Studio 2019 or later can be used with ASP.NET Core 3.1 applications. 
      - question: How can I track telemetry that's not automatically collected?
        answer: |
          Get an instance of `TelemetryClient` by using constructor injection and call the required `TrackXXX()` method on it. We don't recommend creating new `TelemetryClient` or `TelemetryConfiguration` instances in an ASP.NET Core application. A singleton instance of `TelemetryClient` is already registered in the `DependencyInjection` container, which shares `TelemetryConfiguration` with the rest of the telemetry. Create a new `TelemetryClient` instance only if it needs a configuration that's separate from the rest of the telemetry.

          The following example shows how to track more telemetry from a controller.

          ```csharp
          using Microsoft.ApplicationInsights;

          public class HomeController : Controller
          {
              private TelemetryClient telemetry;

              // Use constructor injection to get a TelemetryClient instance.
              public HomeController(TelemetryClient telemetry)
              {
                 this.telemetry = telemetry;
              }

              public IActionResult Index()
              {
                  // Call the required TrackXXX method.
                  this.telemetry.TrackEvent("HomePageRequested");
                  return View();
              }
          }
          ```

          For more information about custom data reporting in Application Insights, see [Application Insights custom metrics API reference](./api-custom-events-metrics.md). A similar approach can be used for sending custom metrics to Application Insights by using the [GetMetric API](./get-metric.md).    
         
      - question: How do I capture Request and Response body in my telemetry?
        answer: |
          ASP.NET Core has [built-in support](/aspnet/core/fundamentals/http-logging) for logging HTTP Request/Response information (including body) via [`ILogger`](#ilogger-logs). It's recommended to leverage this. This may potentially expose personally identifiable information (PII) in telemetry, and can cause costs (performance costs and Application Insights billing) to significantly increase, so evaluate the risks carefully before using this.

      - question: How do I customize ILogger logs collection?
        answer: |
          The default setting for Application Insights is to only capture **Warning** and more severe logs.

          Capture **Information** and less severe logs by changing the logging configuration for the Application Insights provider as follows.

          ```json
          {
              "Logging": {
                  "LogLevel": {
                      "Default": "Information"
                  },
                  "ApplicationInsights": {
                      "LogLevel": {
                          "Default": "Information"
                      }
                  }
              },
              "ApplicationInsights": {
                  "ConnectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000"
              }
          }
          ```

          It's important to note that the following example doesn't cause the Application Insights provider to capture `Information` logs. It doesn't capture it because the SDK adds a default logging filter that instructs `ApplicationInsights` to capture only `Warning` logs and more severe logs. Application Insights requires an explicit override.

          ```json
          {
              "Logging": {
                 "LogLevel": {
                     "Default": "Information"
                 }
              }
          }
          ```

          For more information, see [ILogger configuration](/dotnet/core/extensions/logging#configure-logging).

      - question: Some Visual Studio templates used the UseApplicationInsights() extension method on IWebHostBuilder to enable Application Insights. Is this usage still valid?
        answer: |
          The extension method `UseApplicationInsights()` is still supported, but it's marked as obsolete in Application Insights SDK version 2.8.0 and later. It's removed in the next major version of the SDK. To enable Application Insights telemetry, use `AddApplicationInsightsTelemetry()` because it provides overloads to control some configuration. Also, in ASP.NET Core 3.X apps, `services.AddApplicationInsightsTelemetry()` is the only way to enable Application Insights.

      - question: I'm deploying my ASP.NET Core application to Web Apps. Should I still enable the Application Insights extension from Web Apps?
        answer: | 
          If the SDK is installed at build time as shown in this article, you don't need to enable the [Application Insights extension](./azure-web-apps.md) from the App Service portal. If the extension is installed, it backs off when it detects the SDK is already added. If you enable Application Insights from the extension, you don't have to install and update the SDK. But if you enable Application Insights by following instructions in this article, you have more flexibility because:

          * Application Insights telemetry continues to work in:
             * All operating systems, including Windows, Linux, and Mac.
             * All publish modes, including self-contained or framework dependent.
             * All target frameworks, including the full .NET Framework.
             * All hosting options, including Web Apps, VMs, Linux, containers, AKS, and non-Azure hosting.
             * All .NET Core versions, including preview versions.
          * You can see telemetry locally when you're debugging from Visual Studio.
          * You can track more custom telemetry by using the `TrackXXX()` API.
          * You have full control over the configuration.

      - question: Can I enable Application Insights monitoring by using tools like Azure Monitor Application Insights Agent (formerly Status Monitor v2)?
        answer: |
          Yes. In [Application Insights Agent 2.0.0-beta1](https://www.powershellgallery.com/packages/Az.ApplicationMonitor/2.0.0-beta1) and later, ASP.NET Core applications hosted in IIS are supported.

      - question: Are all features supported if I run my application in Linux?
        answer: |
          Yes. Feature support for the SDK is the same in all platforms, with the following exceptions:

          * The SDK collects [event counters](./asp-net-counters.md) on Linux because [performance counters](./asp-net-counters.md) are only supported in Windows. Most metrics are the same.

      - question: Is this SDK supported for Worker Services?
        answer: |
          No. Instead, use [Application Insights for Worker Service applications (non-HTTP applications)](worker-service.md) for worker services.
            
      - question: How can I uninstall the SDK?
        answer: |
          To remove Application Insights, you need to remove the NuGet packages and references from the API in your application. You can uninstall NuGet packages by using the NuGet Package Manager in Visual Studio.

          > [!NOTE]
          > These instructions are for uninstalling the ASP.NET Core SDK. If you need to uninstall the ASP.NET SDK, see [How can I uninstall the ASP.NET SDK?](./asp-net.md#how-can-i-uninstall-the-sdk).

          1. Uninstall the Microsoft.ApplicationInsights.AspNetCore package by using the [NuGet Package Manager](/nuget/consume-packages/install-use-packages-visual-studio#uninstall-a-package).
          1. To fully remove Application Insights, check and manually delete the added code or files along with any API calls you added in your project. For more information, see [What is created when you add the Application Insights SDK?](#what-is-created-when-you-add-the-application-insights-sdk).

      - question: What is created when you add the Application Insights SDK?
        answer: |
          When you add Application Insights to your project, it creates files and adds code to some of your files. Solely uninstalling the NuGet Packages won't always discard the files and code. To fully remove Application Insights, you should check and manually delete the added code or files along with any API calls you added in your project.

          When you add Application Insights Telemetry to a Visual Studio ASP.NET Core template project, it adds the following code:

          * *[Your project's name].csproj*

          ```csharp
          <PropertyGroup>
              <TargetFramework>netcoreapp3.1</TargetFramework>
              <ApplicationInsightsResourceId>/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourcegroups/Default-ApplicationInsights-EastUS/providers/microsoft.insights/components/WebApplication4core</ApplicationInsightsResourceId>
          </PropertyGroup>
  
          <ItemGroup>
              <PackageReference Include="Microsoft.ApplicationInsights.AspNetCore" Version="2.12.0" />
          </ItemGroup>
  
          <ItemGroup>
              <WCFMetadata Include="Connected Services" />
          </ItemGroup>
          ```

          * *Appsettings.json*

          ```json
          "ApplicationInsights": {
              "ConnectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000"
          }
          ```

          * *ConnectedService.json*
    
          ```json
          {    
              "ProviderId": "Microsoft.ApplicationInsights.ConnectedService.ConnectedServiceProvider",
              "Version": "16.0.0.0",
              "GettingStartedDocument": {
                  "Uri": "https://go.microsoft.com/fwlink/?LinkID=798432"
              }
          }
          ```
          * *Startup.cs*

          ```csharp
          public void ConfigureServices(IServiceCollection services)
              {
                 services.AddRazorPages();
                 services.AddApplicationInsightsTelemetry(); // This is added
              }
          ```

      - question: How can I disable telemetry correlation?
        answer: |
          To disable telemetry correlation in code, see `<ExcludeComponentCorrelationHttpHeadersOnDomains>` in [Application Insights for console applications](/previous-versions/azure/azure-monitor/app/console).

 
additionalContent: |
    ## Related content

    To learn more, see [article title](link.md).